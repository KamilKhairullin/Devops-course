
pipeline {
    environment {
        PDM_VERSION = '1.8.0'
        APP_PATH = 'app_python/myapp'
        DOCKER_PATH = 'app_python'
        CODE = 'main.py'
        TESTS = 'tests'
        registry = "kamilkhairullin/devops_inno:latest" 
        registryCredential = 'DOCKERHUB.ID' 
        dockerImage = '' 
    }
    agent { 
        dockerfile { 
            dir 'Jenkins'
            args '-u root -v $HOME/.cache:/root/.cache -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    stages {
        stage('Clean') {
            steps {
                cleanup { cleanWs() }
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('deps') {
            steps {
                dir("${APP_PATH}") {
                    sh 'pdm install'
                }
            }
        }
        stage('run-linters-and-test') {
            steps {
                parallel (
                    'codestyle': {
                        dir("${APP_PATH}") {
                            sh 'pdm run isort ${CODE}'
                            sh 'pdm run darglint ${CODE}'
                            sh 'pdm run black ${CODE}'
                        }
                    },
                    'lint': {
                        dir("${APP_PATH}") {
                            sh 'pdm run pylint ${CODE}'
                        }
                    }, 
                    'test': {
                        dir("${APP_PATH}") {
                            sh 'pdm run python -m pytest ${TESTS}'
                        }
                    }
                )
                
            }
        }
        stage('Build docker image') {
            steps{
                dir("${DOCKER_PATH}") {
                    script {
                        dockerImage = docker.build registry
                    }
                }
            }
        }

        stage('Deploy docker image') {
            steps{
                script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push()
                    }
                }
            }
        }
    }
    post {
        cleanup { cleanWs() }
    }
}